import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, TouchableOpacity, Alert, Linking, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { LineChart } from 'react-native-chart-kit';
import { Dimensions } from 'react-native';
import { Stock, StockInfo, StockChartData } from '../types';

// Demo data - IBM stock information (COMPLETE DATA)
const DEMO_STOCK_INFO = {
    "Symbol": "IBM",
    "AssetType": "Common Stock",
    "Name": "International Business Machines",
    "Description": "International Business Machines Corporation (IBM) is an American multinational technology company headquartered in Armonk, New York, with operations in over 170 countries. The company began in 1911, founded in Endicott, New York, as the Computing-Tabulating-Recording Company (CTR) and was renamed International Business Machines in 1924. IBM is incorporated in New York. IBM produces and sells computer hardware, middleware and software, and provides hosting and consulting services in areas ranging from mainframe computers to nanotechnology. IBM is also a major research organization, holding the record for most annual U.S. patents generated by a business (as of 2020) for 28 consecutive years. Inventions by IBM include the automated teller machine (ATM), the floppy disk, the hard disk drive, the magnetic stripe card, the relational database, the SQL programming language, the UPC barcode, and dynamic random-access memory (DRAM). The IBM mainframe, exemplified by the System/360, was the dominant computing platform during the 1960s and 1970s.",
    "CIK": "51143",
    "Exchange": "NYSE",
    "Currency": "USD",
    "Country": "USA",
    "Sector": "TECHNOLOGY",
    "Industry": "COMPUTER & OFFICE EQUIPMENT",
    "Address": "1 NEW ORCHARD ROAD, ARMONK, NY, US",
    "OfficialSite": "https://www.ibm.com",
    "FiscalYearEnd": "December",
    "LatestQuarter": "2025-03-31",
    "MarketCapitalization": "273967645000",
    "EBITDA": "13950000000",
    "PERatio": "49.54",
    "PEGRatio": "2.186",
    "BookValue": "28.92",
    "DividendPerShare": "6.68",
    "DividendYield": "0.0232",
    "EPS": "5.95",
    "RevenuePerShareTTM": "67.97",
    "ProfitMargin": "0.0871",
    "OperatingMarginTTM": "0.124",
    "ReturnOnAssetsTTM": "0.0447",
    "ReturnOnEquityTTM": "0.218",
    "RevenueTTM": "62832001000",
    "GrossProfitTTM": "35840000000",
    "DilutedEPSTTM": "5.95",
    "QuarterlyEarningsGrowthYOY": "-0.349",
    "QuarterlyRevenueGrowthYOY": "0.005",
    "AnalystTargetPrice": "258.02",
    "AnalystRatingStrongBuy": "2",
    "AnalystRatingBuy": "8",
    "AnalystRatingHold": "9",
    "AnalystRatingSell": "2",
    "AnalystRatingStrongSell": "1",
    "TrailingPE": "49.54",
    "ForwardPE": "26.88",
    "PriceToSalesRatioTTM": "4.36",
    "PriceToBookRatio": "10.19",
    "EVToRevenue": "5.15",
    "EVToEBITDA": "26.23",
    "Beta": "0.652",
    "52WeekHigh": "296.16",
    "52WeekLow": "168.84",
    "50DayMovingAverage": "262.73",
    "200DayMovingAverage": "239.73",
    "SharesOutstanding": "929397000",
    "SharesFloat": "927361000",
    "PercentInsiders": "0.119",
    "PercentInstitutions": "65.274",
    "DividendDate": "2025-06-10",
    "ExDividendDate": "2025-05-09"
};

// Demo stock object
const DEMO_STOCK = {
    id: "IBM_demo",
    symbol: "IBM",
    name: "International Business Machines",
    currentPrice: 294.78,
    change: 5.08,
    changePercent: 1.75,
    marketCap: 273967645000,
    peRatio: 49.54,
    volume: 3495386,
    high: 296.16,
    low: 168.84,
    open: 290.93,
    previousClose: 289.70,
};

export const DemoProductScreen: React.FC = () => {
    const navigation = useNavigation();
    const [loading, setLoading] = useState(true);
    const [chartLoading, setChartLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [chartData, setChartData] = useState<{ x: number; y: number; date: string }[]>([]);
    const [stockInfo, setStockInfo] = useState<StockInfo | null>(null);
    const [showAllFinancialMetrics, setShowAllFinancialMetrics] = useState(false);
    const [showAllAnalystRatings, setShowAllAnalystRatings] = useState(false);
    const [isDarkMode, setIsDarkMode] = useState(false);
    const screenWidth = Dimensions.get('window').width;

    useEffect(() => {
        loadDemoData();
    }, []);

    const loadDemoData = async () => {
        setLoading(true);
        setChartLoading(true);
        setError(null);

        try {
            // Simulate API loading delay
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Set stock info
            setStockInfo(DEMO_STOCK_INFO);

            // Process chart data from the provided time series data
            const timeSeriesData = {
                "2025-06-30": { "4. close": "294.7800" },
                "2025-06-27": { "4. close": "289.7000" },
                "2025-06-26": { "4. close": "291.9300" },
                "2025-06-25": { "4. close": "291.0600" },
                "2025-06-24": { "4. close": "293.7900" },
                "2025-06-23": { "4. close": "289.1800" },
                "2025-06-20": { "4. close": "280.9700" },
                "2025-06-18": { "4. close": "283.2100" },
                "2025-06-17": { "4. close": "283.0500" },
                "2025-06-16": { "4. close": "281.8300" },
                "2025-06-13": { "4. close": "277.2200" },
                "2025-06-12": { "4. close": "281.0300" },
                "2025-06-11": { "4. close": "281.5200" },
                "2025-06-10": { "4. close": "276.2400" },
                "2025-06-09": { "4. close": "272.0800" },
                "2025-06-06": { "4. close": "268.8700" },
                "2025-06-05": { "4. close": "266.8600" },
                "2025-06-04": { "4. close": "265.5200" },
                "2025-06-03": { "4. close": "265.2000" },
                "2025-06-02": { "4. close": "263.9000" },
                "2025-05-30": { "4. close": "259.0600" },
                "2025-05-29": { "4. close": "258.6900" },
                "2025-05-28": { "4. close": "260.2400" },
                "2025-05-27": { "4. close": "263.2300" },
                "2025-05-23": { "4. close": "258.6300" },
                "2025-05-22": { "4. close": "258.3700" },
                "2025-05-21": { "4. close": "260.8700" },
                "2025-05-20": { "4. close": "266.9500" },
                "2025-05-19": { "4. close": "268.4100" },
                "2025-05-16": { "4. close": "266.7600" }
            };

            const dates = Object.keys(timeSeriesData).sort().reverse();
            const last30Days = dates.slice(0, 30);

            const processedData = last30Days.map((date, index) => {
                const dayData = timeSeriesData[date as keyof typeof timeSeriesData];
                const closePrice = parseFloat(dayData['4. close']);
                const dateObj = new Date(date);

                return {
                    x: index,
                    y: closePrice,
                    date: `${dateObj.getDate()}/${dateObj.getMonth() + 1}`
                };
            }).reverse();

            setChartData(processedData);

        } catch (err) {
            setError('Failed to load demo data. Please try again.');
            console.error('Demo data loading error:', err);
        } finally {
            setLoading(false);
            setChartLoading(false);
        }
    };

    const formatCurrency = (value: string) => {
        const num = parseFloat(value);
        if (isNaN(num)) return value;

        if (num >= 1000000000) {
            return `$${(num / 1000000000).toFixed(2)}B`;
        } else if (num >= 1000000) {
            return `$${(num / 1000000).toFixed(2)}M`;
        } else if (num >= 1000) {
            return `$${(num / 1000).toFixed(2)}K`;
        }
        return `$${num.toFixed(2)}`;
    };

    const formatPercentage = (value: string) => {
        const num = parseFloat(value);
        if (isNaN(num)) return value;
        return `${(num * 100).toFixed(2)}%`;
    };

    const handleOpenWebsite = () => {
        if (stockInfo?.OfficialSite) {
            Linking.openURL(stockInfo.OfficialSite);
        }
    };

    const handleRetry = () => {
        loadDemoData();
    };

    // Loading State
    if (loading) {
        return (
            <View className="flex-1 justify-center items-center bg-white dark:bg-gray-900">
                <ActivityIndicator size="large" color="#3B82F6" />
                <Text className="text-gray-600 dark:text-gray-400 mt-4 text-lg">
                    Loading IBM Stock Data...
                </Text>
                <Text className="text-gray-500 dark:text-gray-500 mt-2 text-sm">
                    Fetching real-time market data
                </Text>
            </View>
        );
    }

    // Error State
    if (error) {
        return (
            <View className="flex-1 justify-center items-center bg-white dark:bg-gray-900 px-6">
                <View className="bg-red-100 dark:bg-red-900 p-6 rounded-lg items-center">
                    <Text className="text-red-600 dark:text-red-400 text-6xl mb-4">⚠️</Text>
                    <Text className="text-red-800 dark:text-red-200 text-lg font-semibold mb-2">
                        Oops! Something went wrong
                    </Text>
                    <Text className="text-red-700 dark:text-red-300 text-center mb-6">
                        {error}
                    </Text>
                    <TouchableOpacity
                        onPress={handleRetry}
                        className="bg-red-600 px-6 py-3 rounded-lg"
                    >
                        <Text className="text-white font-medium">Try Again</Text>
                    </TouchableOpacity>
                </View>
            </View>
        );
    }

    return (
        <View className="flex-1 bg-white dark:bg-gray-900">
            <ScrollView className="flex-1" showsVerticalScrollIndicator={false}>
                {/* Header */}
                <View className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <View className="flex-row justify-between items-center mb-2">
                        <Text className="text-2xl font-bold text-gray-900 dark:text-white">
                            {DEMO_STOCK.symbol}
                        </Text>
                        <View className="bg-blue-100 dark:bg-blue-900 px-3 py-1 rounded-full">
                            <Text className="text-blue-800 dark:text-blue-200 text-xs font-medium">
                                DEMO
                            </Text>
                        </View>
                    </View>
                    <Text className="text-lg text-gray-600 dark:text-gray-400 mb-2">
                        {stockInfo?.Name || DEMO_STOCK.name}
                    </Text>
                    <View className="flex-row items-center">
                        <Text className="text-3xl font-bold text-gray-900 dark:text-white mr-3">
                            ${DEMO_STOCK.currentPrice.toFixed(2)}
                        </Text>
                        <View className={`px-3 py-1 rounded-full ${DEMO_STOCK.changePercent >= 0 ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'}`}>
                            <Text className={`font-medium ${DEMO_STOCK.changePercent >= 0 ? 'text-green-800 dark:text-green-200' : 'text-red-800 dark:text-red-200'}`}>
                                {DEMO_STOCK.changePercent >= 0 ? '+' : ''}{DEMO_STOCK.changePercent.toFixed(2)}%
                            </Text>
                        </View>
                    </View>
                </View>

                {/* Company Information */}
                {stockInfo && (
                    <View className="p-4 border-b border-gray-200 dark:border-gray-700">
                        <Text className="text-lg font-semibold text-gray-900 dark:text-white mb-3">
                            Company Information
                        </Text>

                        <View className="space-y-2 mb-4">
                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">Sector</Text>
                                <Text className="text-gray-900 dark:text-white font-medium text-right w-32" numberOfLines={2}>
                                    {stockInfo.Sector}
                                </Text>
                            </View>
                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">Industry</Text>
                                <Text className="text-gray-900 dark:text-white font-medium text-right w-32" numberOfLines={2}>
                                    {stockInfo.Industry}
                                </Text>
                            </View>
                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">Exchange</Text>
                                <Text className="text-gray-900 dark:text-white font-medium text-right w-32">
                                    {stockInfo.Exchange}
                                </Text>
                            </View>
                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">Country</Text>
                                <Text className="text-gray-900 dark:text-white font-medium text-right w-32">
                                    {stockInfo.Country}
                                </Text>
                            </View>
                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">Address</Text>
                                <Text className="text-gray-900 dark:text-white font-medium text-right w-32" numberOfLines={3}>
                                    {stockInfo.Address}
                                </Text>
                            </View>
                        </View>

                        {stockInfo.OfficialSite && (
                            <TouchableOpacity
                                onPress={handleOpenWebsite}
                                className="border border-gray-300 dark:border-gray-600 p-2 rounded-md"
                            >
                                <Text className="text-gray-700 dark:text-gray-300 text-center text-sm">
                                    Visit Official Website
                                </Text>
                            </TouchableOpacity>
                        )}
                    </View>
                )}

                {/* Chart */}
                <View className="p-4">
                    <View className="flex-row justify-between items-center mb-4">
                        <Text className="text-lg font-semibold text-gray-900 dark:text-white">
                            Price Chart (30 Days)
                        </Text>
                        {chartData.length > 0 && (
                            <View className={`px-3 py-1 rounded-full ${chartData[chartData.length - 1]?.y >= chartData[0]?.y ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'}`}>
                                <Text className={`text-xs font-medium ${chartData[chartData.length - 1]?.y >= chartData[0]?.y ? 'text-green-800 dark:text-green-200' : 'text-red-800 dark:text-red-200'}`}>
                                    {chartData[chartData.length - 1]?.y >= chartData[0]?.y ? '↗ Trending Up' : '↘ Trending Down'}
                                </Text>
                            </View>
                        )}
                    </View>

                    {chartLoading ? (
                        <View className="h-64 justify-center items-center">
                            <ActivityIndicator size="large" color="#3B82F6" />
                            <Text className="text-gray-600 dark:text-gray-400 mt-2">Loading chart data...</Text>
                        </View>
                    ) : chartData.length > 0 ? (
                        <>
                            <View className="h-64 flex items-center justify-center">
                                <LineChart
                                    data={{
                                        labels: chartData.map((item, index) =>
                                            index % Math.ceil(chartData.length / 6) === 0 ? item.date : ''
                                        ),
                                        datasets: [{
                                            data: chartData.map(item => item.y),
                                            color: (opacity = 1) => DEMO_STOCK.changePercent >= 0 ? `rgba(16, 185, 129, ${opacity})` : `rgba(239, 68, 68, ${opacity})`,
                                            strokeWidth: 3,
                                        }]
                                    }}
                                    width={screenWidth}
                                    height={220}
                                    chartConfig={{
                                        backgroundColor: isDarkMode ? '#1F2937' : '#FFFFFF',
                                        backgroundGradientFrom: isDarkMode ? '#1F2937' : '#FFFFFF',
                                        backgroundGradientTo: isDarkMode ? '#1F2937' : '#FFFFFF',
                                        decimalPlaces: 2,
                                        color: (opacity = 1) => isDarkMode ? `rgba(156, 163, 175, ${opacity})` : `rgba(75, 85, 99, ${opacity})`,
                                        labelColor: (opacity = 1) => isDarkMode ? `rgba(156, 163, 175, ${opacity})` : `rgba(75, 85, 99, ${opacity})`,
                                        style: {
                                            borderRadius: 16,
                                        },
                                        propsForDots: {
                                            r: '0',
                                        },
                                        propsForBackgroundLines: {
                                            strokeDasharray: '',
                                            stroke: isDarkMode ? '#374151' : '#E5E7EB',
                                            strokeWidth: 1,
                                        },
                                        paddingRight: 2,
                                    }}
                                    formatYLabel={(value) => `${parseFloat(value).toFixed(0)}`}
                                    formatXLabel={(value) => value}
                                    bezier
                                    style={{
                                        marginVertical: 8,
                                        borderRadius: 16,
                                    }}
                                    withDots={false}
                                    withShadow={false}
                                    withInnerLines={false}
                                    withOuterLines={true}
                                    withVerticalLines={true}
                                    withHorizontalLines={true}
                                />

                            </View>
                            <View className="mt-4 flex-row justify-between items-center">
                                <View>
                                    <Text className="text-sm text-gray-600 dark:text-gray-400">
                                        Start: {chartData[0]?.date} (Day/Month)
                                    </Text>
                                    <Text className="text-sm text-gray-600 dark:text-gray-400">
                                        End: {chartData[chartData.length - 1]?.date} (Day/Month)
                                    </Text>
                                    {/* <Text className="text-sm text-gray-600 dark:text-gray-400">
                                        Data Points: {chartData.length}
                                    </Text> */}
                                </View>
                                <View className="items-end">
                                    <Text className="text-sm text-gray-600 dark:text-gray-400">
                                        Low: ${Math.min(...chartData.map(d => d.y)).toFixed(2)}
                                    </Text>
                                    <Text className="text-sm text-gray-600 dark:text-gray-400">
                                        High: ${Math.max(...chartData.map(d => d.y)).toFixed(2)}
                                    </Text>
                                    <Text className="text-sm text-gray-600 dark:text-gray-400">
                                        Current: ${chartData[chartData.length - 1]?.y.toFixed(2)}
                                    </Text>
                                </View>
                            </View>
                        </>
                    ) : (
                        <View className="h-64 justify-center items-center">
                            <Text className="text-gray-600 dark:text-gray-400 text-lg">📊</Text>
                            <Text className="text-gray-600 dark:text-gray-400 mt-2">No chart data available</Text>
                        </View>
                    )}
                </View>

                {/* Price Statistics */}
                {chartData.length > 0 && (
                    <View className="p-4 border-b border-gray-200 dark:border-gray-700">
                        <Text className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                            Price Statistics (30 Days)
                        </Text>

                        <View className="space-y-3">
                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">30-Day High</Text>
                                <Text className="text-gray-900 dark:text-white font-medium">
                                    ${Math.max(...chartData.map(d => d.y)).toFixed(2)}
                                </Text>
                            </View>

                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">30-Day Low</Text>
                                <Text className="text-gray-900 dark:text-white font-medium">
                                    ${Math.min(...chartData.map(d => d.y)).toFixed(2)}
                                </Text>
                            </View>

                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">30-Day Range</Text>
                                <Text className="text-gray-900 dark:text-white font-medium">
                                    ${(Math.max(...chartData.map(d => d.y)) - Math.min(...chartData.map(d => d.y))).toFixed(2)}
                                </Text>
                            </View>

                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">30-Day Change</Text>
                                <Text className="text-green-600 dark:text-green-400 font-medium">
                                    +${(chartData[chartData.length - 1]?.y - chartData[0]?.y).toFixed(2)}
                                    ({(((chartData[chartData.length - 1]?.y - chartData[0]?.y) / chartData[0]?.y) * 100).toFixed(2)}%)
                                </Text>
                            </View>

                            <View className="flex-row justify-between">
                                <Text className="text-gray-600 dark:text-gray-400">30-Day Average</Text>
                                <Text className="text-gray-900 dark:text-white font-medium">
                                    ${(chartData.reduce((sum, d) => sum + d.y, 0) / chartData.length).toFixed(2)}
                                </Text>
                            </View>
                        </View>
                    </View>
                )}

                {/* Financial Metrics */}
                <View className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <Text className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                        Financial Metrics
                    </Text>

                    <View className="space-y-3">
                        <View className="flex-row justify-between">
                            <Text className="text-gray-600 dark:text-gray-400">Market Cap</Text>
                            <Text className="text-gray-900 dark:text-white font-medium">
                                {formatCurrency(DEMO_STOCK_INFO.MarketCapitalization)}
                            </Text>
                        </View>

                        <View className="flex-row justify-between">
                            <Text className="text-gray-600 dark:text-gray-400">P/E Ratio</Text>
                            <Text className="text-gray-900 dark:text-white font-medium">
                                {DEMO_STOCK_INFO.PERatio}
                            </Text>
                        </View>

                        <View className="flex-row justify-between">
                            <Text className="text-gray-600 dark:text-gray-400">EPS</Text>
                            <Text className="text-gray-900 dark:text-white font-medium">
                                ${DEMO_STOCK_INFO.EPS}
                            </Text>
                        </View>

                        {showAllFinancialMetrics && (
                            <>
                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Forward P/E</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {DEMO_STOCK_INFO.ForwardPE}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Dividend Yield</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {formatPercentage(DEMO_STOCK_INFO.DividendYield)}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Dividend Per Share</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        ${DEMO_STOCK_INFO.DividendPerShare}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Beta</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {DEMO_STOCK_INFO.Beta}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">52 Week High</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        ${DEMO_STOCK_INFO["52WeekHigh"]}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">52 Week Low</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        ${DEMO_STOCK_INFO["52WeekLow"]}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">50 Day MA</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        ${DEMO_STOCK_INFO["50DayMovingAverage"]}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">200 Day MA</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        ${DEMO_STOCK_INFO["200DayMovingAverage"]}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Book Value</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        ${DEMO_STOCK_INFO.BookValue}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Revenue TTM</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {formatCurrency(DEMO_STOCK_INFO.RevenueTTM)}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">EBITDA</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {formatCurrency(DEMO_STOCK_INFO.EBITDA)}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Profit Margin</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {formatPercentage(DEMO_STOCK_INFO.ProfitMargin)}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Return on Equity</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {formatPercentage(DEMO_STOCK_INFO.ReturnOnEquityTTM)}
                                    </Text>
                                </View>
                            </>
                        )}
                    </View>

                    <TouchableOpacity
                        onPress={() => setShowAllFinancialMetrics(!showAllFinancialMetrics)}
                        className="mt-4 border border-gray-300 dark:border-gray-600 p-2 rounded-md"
                    >
                        <Text className="text-gray-700 dark:text-gray-300 text-center text-sm">
                            {showAllFinancialMetrics ? 'Show Less' : 'Show More Financial Metrics'}
                        </Text>
                    </TouchableOpacity>
                </View>

                {/* Analyst Ratings */}
                <View className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <Text className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                        Analyst Ratings
                    </Text>

                    <View className="space-y-3">
                        <View className="flex-row justify-between">
                            <Text className="text-gray-600 dark:text-gray-400">Target Price</Text>
                            <Text className="text-gray-900 dark:text-white font-medium">
                                ${DEMO_STOCK_INFO.AnalystTargetPrice}
                            </Text>
                        </View>

                        <View className="flex-row justify-between">
                            <Text className="text-gray-600 dark:text-gray-400">Strong Buy</Text>
                            <Text className="text-gray-900 dark:text-white font-medium">
                                {DEMO_STOCK_INFO.AnalystRatingStrongBuy}
                            </Text>
                        </View>

                        <View className="flex-row justify-between">
                            <Text className="text-gray-600 dark:text-gray-400">Buy</Text>
                            <Text className="text-gray-900 dark:text-white font-medium">
                                {DEMO_STOCK_INFO.AnalystRatingBuy}
                            </Text>
                        </View>

                        {showAllAnalystRatings && (
                            <>
                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Hold</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {DEMO_STOCK_INFO.AnalystRatingHold}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Sell</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {DEMO_STOCK_INFO.AnalystRatingSell}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Strong Sell</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {DEMO_STOCK_INFO.AnalystRatingStrongSell}
                                    </Text>
                                </View>

                                <View className="flex-row justify-between">
                                    <Text className="text-gray-600 dark:text-gray-400">Total Analysts</Text>
                                    <Text className="text-gray-900 dark:text-white font-medium">
                                        {parseInt(DEMO_STOCK_INFO.AnalystRatingStrongBuy) +
                                            parseInt(DEMO_STOCK_INFO.AnalystRatingBuy) +
                                            parseInt(DEMO_STOCK_INFO.AnalystRatingHold) +
                                            parseInt(DEMO_STOCK_INFO.AnalystRatingSell) +
                                            parseInt(DEMO_STOCK_INFO.AnalystRatingStrongSell)}
                                    </Text>
                                </View>
                            </>
                        )}
                    </View>

                    <TouchableOpacity
                        onPress={() => setShowAllAnalystRatings(!showAllAnalystRatings)}
                        className="mt-4 border border-gray-300 dark:border-gray-600 p-2 rounded-md"
                    >
                        <Text className="text-gray-700 dark:text-gray-300 text-center text-sm">
                            {showAllAnalystRatings ? 'Show Less' : 'Show More Analyst Ratings'}
                        </Text>
                    </TouchableOpacity>
                </View>

                {/* Company Description */}
                <View className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <Text className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                        About {DEMO_STOCK_INFO.Name}
                    </Text>
                    <Text className="text-gray-600 dark:text-gray-400 leading-6">
                        {DEMO_STOCK_INFO.Description}
                    </Text>
                </View>

                {/* Demo Info */}
                <View className="p-4 bg-blue-50 dark:bg-blue-900/20">
                    <Text className="text-blue-800 dark:text-blue-200 text-sm font-medium mb-2">
                        📊 Demo Information
                    </Text>
                    <Text className="text-blue-700 dark:text-blue-300 text-sm">
                        This is a complete demo screen showcasing IBM stock data from the Alpha Vantage API.
                        All financial metrics, analyst ratings, and company information are now displayed.
                    </Text>
                    <Text className="text-blue-700 dark:text-blue-300 text-sm mt-2">
                        API Endpoints used:
                    </Text>
                    <Text className="text-blue-600 dark:text-blue-400 text-xs mt-1">
                        • TIME_SERIES_DAILY: https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo
                    </Text>
                    <Text className="text-blue-600 dark:text-blue-400 text-xs">
                        • OVERVIEW: https://www.alphavantage.co/query?function=OVERVIEW&symbol=IBM&apikey=demo
                    </Text>
                    <Text className="text-blue-700 dark:text-blue-300 text-sm mt-2">
                        Data Utilization: 100% of provided IBM data
                    </Text>
                </View>
            </ScrollView>
        </View>
    );
}; 